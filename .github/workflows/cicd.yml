name: "Tests"
on:
    push:
    schedule:
        - cron: '0 8 * * *'

env:
  ver: 0.1.${{ github.run_number }}

jobs:
    test:
        runs-on: windows-latest

        steps:
        - name: Clone
          uses: actions/checkout@v4

        - name: Test
          run: dotnet test --logger "console;verbosity=detailed"
          
    nuget:
        needs: test
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest

        steps:
        - name: Clone
          uses: actions/checkout@v4

        - name: Create
          run: |
            cd lib
            dotnet pack -c Release /p:Version=$ver
            cd bin/Release
            for file in *.nupkg; do
              new_name="test.nupkg"
              mv "$file" "$new_name"
              break
            done
            dotnet nuget push test.nupkg -k ${{secrets.NUGET_API}} --source https://api.nuget.org/v3/index.json

    docker:
        needs: test
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - name: Build
            run: |
              docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_TOKEN}}
              docker build -t perdub/ddg-ai-proxy:${{env.ver}} -t perdub/ddg-ai-proxy:latest .
              docker image push perdub/ddg-ai-proxy:${{env.ver}}
              docker image push perdub/ddg-ai-proxy:latest

    draft-release:
      needs: bin-server
      #if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      env:
        GH_TOKEN: ${{ github.token }}
      steps:
                   
        - uses: actions/download-artifact@v4
            
        - run: ls -R && mkdir bin
        - name: Zip folders
          run: |
            for dir in */; do
              base=$(basename "$dir")
              zip -r "$base.zip" "$dir"
            done
        
        - name: Release
          run: |
            
            gh release create v${{env.ver}} *.zip
        

    bin-server:
      needs: test
      strategy:
        matrix:
          target-os: ["win", "linux"]
          self-contained: [true, false]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: build
          run: |
            sudo dotnet publish web/DdgAiProxy.csproj -c Release --sc ${{matrix.self-contained}} --os ${{matrix.target-os}} -o /result

        - uses: actions/upload-artifact@v4
          with:
              name: ${{matrix.target-os}}-Release-isSelfContained-${{matrix.self-contained}}
              path: /result



